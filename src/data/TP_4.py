import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sqlalchemy import create_engine

def connect_to_db(db_config):
    database_url = (
        f"{db_config['dbms_engine']}://{db_config['dbms_username']}:{db_config['dbms_password']}@"
        f"{db_config['dbms_ip']}:{db_config['dbms_port']}/{db_config['dbms_database']}"
    )
    try:
        engine = create_engine(database_url)
        print("Database connection established successfully.")
        return engine
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        return None

def main():
    db_config = {
        "dbms_engine": "postgresql",
        "dbms_username": "postgres",
        "dbms_password": "admin",
        "dbms_ip": "localhost",
        "dbms_port": "5432",
        "dbms_database": "snowflakedatabase",
    }
    
    engine = connect_to_db(db_config)
    if not engine:
        return

    # Load data into a DataFrame
    df_trip = pd.read_sql_table('Trip', engine)

    # Analyzing top 5 KPIs
    total_trips = df_trip['TripID'].nunique()
    total_revenue = df_trip['total_amount'].sum()
    total_distance = df_trip['trip_distance'].sum()
    average_passengers = df_trip['passenger_count'].mean()
    df_trip['pickup_datetime'] = pd.to_datetime(df_trip['tpep_pickup_datetime'])
    df_trip['dropoff_datetime'] = pd.to_datetime(df_trip['tpep_dropoff_datetime'])
    df_trip['trip_duration'] = (df_trip['dropoff_datetime'] - df_trip['pickup_datetime']).dt.total_seconds() / 60
    average_trip_duration = df_trip['trip_duration'].mean()

    print(f"KPI 1: Total number of trips = {total_trips}")
    print(f"KPI 2: Total revenue generated by trips = {total_revenue}")
    print(f"KPI 3: Total distance traveled = {total_distance} miles")
    print(f"KPI 4: Average number of passengers per trip = {average_passengers:.2f}")
    print(f"KPI 5: Average trip duration = {average_trip_duration:.2f} minutes")

    # Visualization using plots
    plt.figure(figsize=(10, 6))
    sns.histplot(df_trip['passenger_count'], bins=30, kde=True)
    plt.title('Distribution of passenger count')
    plt.xlabel('Number of passengers')
    plt.ylabel('Frequency')
    plt.show()

    plt.figure(figsize=(8, 5))
    sns.countplot(x='payment_type', data=df_trip)
    plt.title('Distribution of payment types')
    plt.xlabel('Payment type')
    plt.ylabel('Number of trips')
    plt.show()

    plt.figure(figsize=(10, 8))
    sns.heatmap(df_trip.corr(), annot=True, cmap='coolwarm')
    plt.title('Heatmap of correlations between numerical variables')
    plt.show()

if __name__ == '__main__':
    main()
